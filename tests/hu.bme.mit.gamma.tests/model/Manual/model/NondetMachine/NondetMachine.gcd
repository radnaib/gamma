package NondetMachine

import "Interface.gcd"

statechart NondetMachine() [
	port Command : requires EventStream
] {
	var a : integer := 10
	var b : integer := 20
	region main_region_1 {
		initial init_1
		state state_1
		state state_2
		state state_3
	}
	transition from init_1 to state_1
	transition from state_1 to state_2 when Command.command [Command.command::param > 10] / {
		{
			if (a >= 10) {
				if (b <= Command.command::param) {
					a := a + 5;
					if (a + b < 15) {
						a := a + b;
					}
					else {
						b := b - a;
					}
					b := b + 1;
				}
				else {
					b := b + 5;
					if (a - b < 15) {
						b := a + b; // Division: '/' does not work?
					}
					else {
						b := b * a;
					}
					b := b - 1;
				}
				a := a + 1;
			}
			else {
				a := a / 2;
			}
		}
	}
	transition from state_1 to state_3 when Command.command [Command.command::param > 10] / {
		{
			if (a >= 10) {
				if (b <= Command.command::param) {
					a := a / 5; // 2 - if the divisor is greater than 5, this is a deadlock expression
					if (a + b < 15) {
						a := a * b;
					}
					else {
						b := b + a; // 22
					}
					b := b - 1; // 21
				}
				else {
					b := b + 5; // 25
					if (a - b < 17) {
						b := a - b; // -15
					}
					else {
						b := b * a;
					}
					b := b - 1; // -16
				}
				a := a - b;
			}
			else {
				b := b / 2;
			}
		}
	}
}
