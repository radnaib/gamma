import "model/ReturnFunctionMachine/ReturnFunctionMachineWrapper"

trace ReturnFunctionMachineTest of ReturnFunctionMachineWrapper

step {
	act {
		reset
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::A_;
		variable returnFunctionMachine.x = 0;
	}
}
step {
	act {
		raise P.message_int(0) 
		schedule component
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::B_;
		variable returnFunctionMachine.x = 0;
	}
}
step {
	act {
		raise P.message_int(0) 
		schedule component
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::B_;
		variable returnFunctionMachine.x = 0;
	}
}
step {
	act {
		raise P.message_int(-1) 
		schedule component
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::B_;
		variable returnFunctionMachine.x = 0;
	}
}
step {
	act {
		raise P.message_int(1) 
		schedule component
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::A_;
		variable returnFunctionMachine.x = 0;
	}
}
step {
	act {
		raise P.message_int(1) 
		schedule component
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::B_;
		variable returnFunctionMachine.x = 1;
	}
}
step {
	act {
		raise P.message_int(1) 
		schedule component
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::A_;
		variable returnFunctionMachine.x = 1;
	}
}
step {
	act {
		raise P.message_int(-1) 
		schedule component
	}
	assert {
		variable returnFunctionMachine.returnFunctionMachineState = _ReturnFunctionMachine_::B_;
		variable returnFunctionMachine.x = 0;
	}
}