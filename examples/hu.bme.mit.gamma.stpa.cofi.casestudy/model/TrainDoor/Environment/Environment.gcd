package traindoorcontrol

import "Interface/Interface.gcd"

@TransitionPriority = order-based
statechart Environment [
	port ControlActions : requires ControlActions
	port FeedbackDoorState : provides FeedbackDoorState
	port OpeningTimeout : requires Timeout { invariant OpeningTimeout.^timeout:: imply in-state(DoorStateRegion.Opening) }
	port ClosingTimeout : requires Timeout { invariant ClosingTimeout.^timeout:: imply in-state(DoorStateRegion.Closing) }
] {
	region DoorStateRegion {
		initial InitialDoorState
		state Closing {
			entry / raise FeedbackDoorState.feedback(DoorState::CLOSING);
		}
		state Closed {
			entry / raise FeedbackDoorState.feedback(DoorState::CLOSED);
		}
		state Opening {
			entry / raise FeedbackDoorState.feedback(DoorState::OPENING);
		}
		state Open {
			entry / raise FeedbackDoorState.feedback(DoorState::OPEN);
		}
	}
	transition from InitialDoorState to Closed
	transition from Closed to Opening when ControlActions.controlDoor [ControlActions.controlDoor::action == ControlAction::OPEN]
	transition from Opening to Closing when ControlActions.controlDoor [ControlActions.controlDoor::action == ControlAction::CLOSE]
	transition from Opening to Open when OpeningTimeout.^timeout
	transition from Open to Closing when ControlActions.controlDoor [ControlActions.controlDoor::action == ControlAction::CLOSE]
	transition from Closing to Opening when ControlActions.controlDoor [ControlActions.controlDoor::action == ControlAction::OPEN]
	transition from Closing to Closed when ClosingTimeout.^timeout
}
